name: Compile check

# Controls when the action will run.
on:
  # Triggers the workflow for pushes to master or development, for pull request events, and for the merge queue
  push:
    branches: [master, development]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]
  merge_group:
    types: [checks_requested]

  workflow_dispatch:

jobs:
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update -yq
          sudo apt-get install --no-install-recommends liballegro4-dev libloadpng4-dev libflac++-dev luajit-5.1-dev liblua5.2-dev libminizip-dev liblz4-dev libpng++-dev libx11-dev libtbb-dev libboost-dev libsdl2-dev libopengl-dev ninja-build
          sudo pip install meson==0.60.3

      - name: Install Clang
        # You may pin to the exact commit or the version.
        # uses: egor-tensin/setup-clang@d16e36d5f8a7eb00aa6627c1a536d94dfc4a913d
        uses: egor-tensin/setup-clang@v1
        with:
          # Set up cc/c++ executables
          cc: 1 # optional, default is 1

      - name: Build
        env:
          CC: "clang"
          CXX: "clang++"
        run: |
          meson setup --buildtype=debug -Ddebug_type=full build
          meson compile -C build

  build-macos:
    runs-on: macos-latest


    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3

      - name: Install Dependencies
        run: |
          brew install pkg-config sdl2 minizip lz4 flac luajit lua@5.1 libpng ninja meson

      - name: Build
        env:
          CC: "clang"
          CXX: "clang++"
        run: |
          meson setup --buildtype=debug -Ddebug_type=full build
          meson compile -C build

  build-windows:
    env:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: RTEA.sln

      # Configuration type to build.
      # You can convert this to a build matrix if you need coverage of multiple configuration types.
      # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      BUILD_CONFIGURATION: "Final"

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1


    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration="${{env.BUILD_CONFIGURATION}}" ${{env.SOLUTION_FILE_PATH}}
